/// Cli.h
/// Copyright 2017 Mac Radigan
/// All Rights Reserved

  #include <signal.h>
  #include <type_traits>
  #include <functional>
  #include <boost/property_tree/ptree.hpp>
  #include <boost/property_tree/xml_parser.hpp>
  #include <boost/foreach.hpp>
  #include <boost/program_options.hpp>

#pragma once

  #define CLI__ENABLE_STACKTRACE

namespace rad::cli {

  namespace po = boost::program_options;

  static void interrupt(int signo);

  enum class Interrupt_Signal 
  {
    Sighup    = SIGHUP,    // SIGHUP      1 Hangup                              (POSIX)         Report that user's terminal is disconnected. Signal used to report the termination of the controlling process.
    Sigint    = SIGINT,    // SIGINT      2 Interrupt                           (ANSI)          Program interrupt. (ctrl-c)
    Sigquit   = SIGQUIT,   // SIGQUIT     3 Quit                                (POSIX)         Terminate process and generate core dump.
    Sigill    = SIGILL,    // SIGILL      4 Illegal Instruction                 (ANSI)          Generally indicates that the executable file is corrupted or use of data where a pointer to a function was expected.
    Sigtrap   = SIGTRAP,   // SIGTRAP     5 Trace trap                          (POSIX)
    Sigabrt   = SIGABRT,   // SIGABRT
    Sigiot    = SIGIOT,    // SIGIOT      6 Abort                               (ANSI)          IOT trap (4.2 BSD) Process detects error and reports by calling abort
    Sigbus    = SIGBUS,    // SIGBUS      7 BUS error                           (4.2 BSD)       Indicates an access to an invalid address.
    Sigfpe    = SIGFPE,    // SIGFPE      8 Floating-Point arithmetic Exception (ANSI).         This includes division by zero and overflow.The IEEE Standard for Binary Floating-Point Arithmetic (ANSI/IEEE Std 754-1985) defines various floating-point exceptions.
    Sigkill   = SIGKILL,   // SIGKILL     9 Kill, unblockable                   (POSIX)         Cause immediate program termination.  Can not be handled, blocked or ignored.
    Sigusr1   = SIGUSR1,   // SIGUSR1    10  User-defined signal 1
    Sigsegv   = SIGSEGV,   // SIGSEGV    11  Segmentation Violation             (ANSI)          Occurs when a program tries to read or write outside the memory that is allocated for it by the operating system, dereferencing a bad or NULL pointer. Indicates an invalid access to valid memory.
    Sigusr2   = SIGUSR2,   // SIGUSR2    12  User-defined signal 2                              
    Sigpipe   = SIGPIPE,   // SIGPIPE    13  Broken pipe                        (POSIX)         Error condition like trying to write to a socket which is not connected.
    Sigalrm   = SIGALRM,   // SIGALRM    14  Alarm clock                        (POSIX)         Indicates expiration of a timer. Used by the alarm() function.
    Sigterm   = SIGTERM,   // SIGTERM    15  Termination                        (ANSI)          This signal can be blocked, handled, and ignored. Generated by "kill" command.
    Sigstkflt = SIGSTKFLT, // SIGSTKFLT  16  Stack fault
    Sigchld   = SIGCHLD,   // SIGCHLD
    Sigcld    = SIGCLD,    // SIGCLD     17  Child status has changed           (POSIX)         Signal sent to parent process whenever one of its child processes terminates or stops.
    Sigcont   = SIGCONT,   // SIGCONT    18  Continue                           (POSIX)         Signal sent to process to make it continue.
    Sigstop   = SIGSTOP,   // SIGSTOP    19  Stop, unblockable                  (POSIX)         Stop a process. This signal cannot be handled, ignored, or blocked.
    Sigtstp   = SIGTSTP,   // SIGTSTP    20  Keyboard stop                      (POSIX)         Interactive stop signal. This signal can be handled and ignored. (ctrl-z)
    Sigttin   = SIGTTIN,   // SIGTTIN    21  Background read from tty           (POSIX)
    Sigttou   = SIGTTOU,   // SIGTTOU    22  Background write to tty            (POSIX)
    Sigurg    = SIGURG,    // SIGURG     23  Urgent condition on socket         (4.2 BSD)       Signal sent when "urgent" or out-of-band data arrives on a socket.
    Sigxcpu   = SIGXCPU,   // SIGXCPU    24  CPU limit exceeded                 (4.2 BSD)
    Sigxfsz   = SIGXFSZ,   // SIGXFSZ    25  File size limit exceeded           (4.2 BSD)
    Sigvtalrm = SIGVTALRM, // SIGVTALRM  26  Virtual Time Alarm                 (4.2 BSD)       Indicates expiration of a timer.
    Sigprof   = SIGPROF,   // SIGPROF    27  Profiling alarm clock              (4.2 BSD)       Indicates expiration of a timer. Use for code profiling facilities.
    Sigwinch  = SIGWINCH,  // SIGWINCH   28  Window size change                 (4.3 BSD, Sun)
    Sigio     = SIGIO,     // SIGIO
    Sigpoll   = SIGPOLL,   // SIGPOLL    29  I/O now possible                   (4.2 BSD)       Pollable event occurred (System V) Signal sent when file descriptor is ready to perform I/O (generated by sockets)
    Sigpwr    = SIGPWR,    // SIGPWR     30  Power failure restart              (System V)
    Sigsys    = SIGSYS     // SIGSYS     31  Bad system call
  };

  class Cli
  {
      
    public:
      using cli_interrupt_fn_t = std::function<bool (Interrupt_Signal &sig)>;
      
      Cli();
      virtual ~Cli();
      
      void parse(int argc, char* argv[]);
      po::options_description_easy_init set_options();
      const po::variables_map get_options() const { return vm_; }
      
      void interrupt(int signo);
      void set_interrupt(cli_interrupt_fn_t &fn);

      po::options_description_easy_init operator()();
      int count(std::string name);
      bool exists(std::string name);
      const po::variable_value& operator[](std::string name) const;
      
    private:
      
      int argc_                      {0};
      char** argv_                   {nullptr};
      std::atomic<bool> verbose_     {false};
      po::options_description desc_  {"options"};
      po::variables_map vm_;
      cli_interrupt_fn_t signal_fn_;
      
      friend std::ostream& operator<<(std::ostream &os, const Cli &o);
      
  };

} // namespace

/// *EOF*
